'.source.matlab':
  'switch … case … end':
    'prefix': 'switch'
    'body': 'switch ${1:var}\ncase ${2:\'${3:string}\'}\n\t$0\nend'
  'switch … case … otherwise … end':
    'prefix': 'switcho'
    'body': 'switch ${1:var}\n\tcase ${2:\'${3:string}\'}\n\t\t$4\n\totherwise\n\t\t$0\nend'
  'try … catch … end':
    'prefix': 'try'
    'body': 'try \n\t$1\ncatch \n\t$0\nend'
  '^':
    'prefix': '^'
    'body': '^($1) $2'
  'case':
    'prefix': 'case'
    'body': 'case ${2:\'${3:string}\'}\n\t$0'
  'disp':
    'prefix': 'disp'
    'body': 'disp(\'${1:Text}\');'
  'dlmwrite':
    'prefix': 'dlmwrite'
    'body': 'dlmwrite(\'${1:filename}.dat\', [${2:variables}], ${3:\'${4:delimiter}\', \'${5:\\t}\'});\n$0'
  'save':
    'prefix': 'save'
    'body': 'save(\'${1:filename}.mat\', \'[${2:variables}]\');\n$0'
  'else':
    'prefix': 'else'
    'body': 'else\n\t${1:body}'
  'elseif':
    'prefix': 'elseif'
    'body': 'elseif ${1:condition}\n\t$0'
  'error':
    'prefix': 'error'
    'body': 'error(\'${1:Description}\');'
  'exp':
    'prefix': 'e'
    'body': 'exp($1) $2'
  'for … end cell strings':
    'prefix': 'fors'
    'body': 'for ${1:s} = transpose(${2:strings}(:)); $1 = $1{1};\n\t$0\nend; clear $1;'
  'for … end':
    'prefix': 'for'
    'body': 'for ${1:ii}=${2:1}${3::${4:n}}\n\t$0\nend'
  'fprintf':
    'prefix': 'fpr'
    'body': 'fprintf(${1:fid,} \'${2:%s}\\\\n\', ${3:str});'
  'function':
    'prefix': 'function'
    'body': 'function ${1:varargout} = ${2:myFunction}(${3:varargin})\n% ${2:myFunction} ${4:Description}\n%\t${1:varargout} = ${2:myFunction}(${5:${3:varargin}})\n%\n% ${6:Long description}\n%\n%\n\n$0\n\n\n% function end: \'${2:myFunction}\'\nend'
  'get':
    'prefix': 'get'
    'body': 'get(${1:gca},\'${2:PropertyName}\');'
  'griddata':
    'prefix': 'griddata'
    'body': 'griddata(${1:xx}, ${2:yy}, ${3:zz}, ${4:xi}, ${5:yi}); '
  'if … else …end':
    'prefix': 'ife'
    'body': 'if ${1:condition}\n\t$2\nelse\n\t$3\nend'
  'if … elseif … end':
    'prefix': 'ifeif'
    'body': 'if ${1:condition}\n\t${2:body}\nelseif ${3:condition}\n\t${4:body}\nelse\n\t${5:body}\nend\n'
  'if … end':
    'prefix': 'if'
    'body': 'if ${1:condition}\n\t$0\nend'
  'line':
    'prefix': 'line'
    'body': 'line(${1:xvector},${2:yvector}${3:,\'Color\',\'${4:b}\',\'LineWidth\',${5:1},\'LineStyle\',\'${6:-}\'})\n'
  'nargchk':
    'prefix': 'nargchk'
    'body': 'error(nargchk(${1:min}, ${2:max}, ${3:nargin}, \'struct\' ));\n'
  'set':
    'prefix': 'set'
    'body': 'set(${1:get(${2:gca},\'${3:PropertyName}\')},\'${4:PropertyName}\',${5:PropertyValue});'
  'small function':
    'prefix': 'f'
    'body': 'function ${1:varargout} = ${2:f}(${3:varargin})\n\t$0\n% function end: \'${2:f}\'\nend'
  'sprintf':
    'prefix': 'spr'
    'body': 'sprintf(\'${1:%s}\\\\n\', ${2:str});'
  'title':
    'prefix': 'zla'
    'body': 'set(get(gca,\'Title\'),\'String\',${1:\'${2}\'});'
  'unix':
    'prefix': 'uni'
    'body': '[${1:s},${2:w}] = unix(\'${3:Unix commands}\');'
  'warning':
    'prefix': 'war'
    'body': 'warning([\'${1:Description}\']);'
  'while':
    'prefix': 'whi'
    'body': 'while ${1:condition}\n\t${2:body}\nend\n'
  'xlabel':
    'prefix': 'xla'
    'body': 'set(get(gca,\'XLabel\'),\'String\',${1:\'${2}\'});'
  'xtick':
    'prefix': 'xti'
    'body': 'set(gca,\'XTick\',${1:[${2}]});'
  'ylabel':
    'prefix': 'yla'
    'body': 'set(get(gca,\'YLabel\'),\'String\',${1:\'${2}\'});'
  'ytick':
    'prefix': 'yti'
    'body': 'set(gca,\'YTick\',${1:[${2}]});'
  'zlabel':
    'prefix': 'zla'
    'body': 'set(get(gca,\'ZLabel\'),\'String\',${1:\'${2}\'});'
